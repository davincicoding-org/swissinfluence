/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Socials".
 */
export type Socials =
  | {
      platform: SocialMediaPlatform;
      url: string;
      id?: string | null;
    }[]
  | null;
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SocialMediaPlatform".
 */
export type SocialMediaPlatform =
  | "INSTAGRAM"
  | "TIKTOK"
  | "LINKEDIN"
  | "YOUTUBE"
  | "APPLE_PODCAST"
  | "SPOTIFY"
  | "TWITCH"
  | "WEBSITE"
  | "WHATSAPP";
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ScheduleSlots".
 */
export type ScheduleSlots =
  | {
      title: string;
      from?: string | null;
      to?: string | null;
      room?: string | null;
      description: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ("ltr" | "rtl") | null;
          format:
            | "left"
            | "start"
            | "center"
            | "right"
            | "end"
            | "justify"
            | "";
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      id?: string | null;
    }[]
  | null;
/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | "Pacific/Midway"
  | "Pacific/Niue"
  | "Pacific/Honolulu"
  | "Pacific/Rarotonga"
  | "America/Anchorage"
  | "Pacific/Gambier"
  | "America/Los_Angeles"
  | "America/Tijuana"
  | "America/Denver"
  | "America/Phoenix"
  | "America/Chicago"
  | "America/Guatemala"
  | "America/New_York"
  | "America/Bogota"
  | "America/Caracas"
  | "America/Santiago"
  | "America/Buenos_Aires"
  | "America/Sao_Paulo"
  | "Atlantic/South_Georgia"
  | "Atlantic/Azores"
  | "Atlantic/Cape_Verde"
  | "Europe/London"
  | "Europe/Berlin"
  | "Africa/Lagos"
  | "Europe/Athens"
  | "Africa/Cairo"
  | "Europe/Moscow"
  | "Asia/Riyadh"
  | "Asia/Dubai"
  | "Asia/Baku"
  | "Asia/Karachi"
  | "Asia/Tashkent"
  | "Asia/Calcutta"
  | "Asia/Dhaka"
  | "Asia/Almaty"
  | "Asia/Jakarta"
  | "Asia/Bangkok"
  | "Asia/Shanghai"
  | "Asia/Singapore"
  | "Asia/Tokyo"
  | "Asia/Seoul"
  | "Australia/Brisbane"
  | "Australia/Sydney"
  | "Pacific/Guam"
  | "Pacific/Noumea"
  | "Pacific/Auckland"
  | "Pacific/Fiji";

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    "publish-queue": PublishQueue;
    photos: Photo;
    logos: Logo;
    "profile-pictures": ProfilePicture;
    pages: Page;
    categories: Category;
    influencers: Influencer;
    experts: Expert;
    brands: Brand;
    locations: Location;
    awards: Award;
    "award-shows": AwardShow;
    "creator-challenges": CreatorChallenge;
    "social-media-campaigns": SocialMediaCampaign;
    "network-events": NetworkEvent;
    "certified-influencers": CertifiedInfluencer;
    agencies: Agency;
    conventions: Convention;
    "voting-submissions": VotingSubmission;
    polyglot_messages: PolyglotMessage;
    "payload-locked-documents": PayloadLockedDocument;
    "payload-preferences": PayloadPreference;
    "payload-migrations": PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    "publish-queue": PublishQueueSelect<false> | PublishQueueSelect<true>;
    photos: PhotosSelect<false> | PhotosSelect<true>;
    logos: LogosSelect<false> | LogosSelect<true>;
    "profile-pictures":
      | ProfilePicturesSelect<false>
      | ProfilePicturesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    influencers: InfluencersSelect<false> | InfluencersSelect<true>;
    experts: ExpertsSelect<false> | ExpertsSelect<true>;
    brands: BrandsSelect<false> | BrandsSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    awards: AwardsSelect<false> | AwardsSelect<true>;
    "award-shows": AwardShowsSelect<false> | AwardShowsSelect<true>;
    "creator-challenges":
      | CreatorChallengesSelect<false>
      | CreatorChallengesSelect<true>;
    "social-media-campaigns":
      | SocialMediaCampaignsSelect<false>
      | SocialMediaCampaignsSelect<true>;
    "network-events": NetworkEventsSelect<false> | NetworkEventsSelect<true>;
    "certified-influencers":
      | CertifiedInfluencersSelect<false>
      | CertifiedInfluencersSelect<true>;
    agencies: AgenciesSelect<false> | AgenciesSelect<true>;
    conventions: ConventionsSelect<false> | ConventionsSelect<true>;
    "voting-submissions":
      | VotingSubmissionsSelect<false>
      | VotingSubmissionsSelect<true>;
    polyglot_messages:
      | PolyglotMessagesSelect<false>
      | PolyglotMessagesSelect<true>;
    "payload-locked-documents":
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>;
    "payload-preferences":
      | PayloadPreferencesSelect<false>
      | PayloadPreferencesSelect<true>;
    "payload-migrations":
      | PayloadMigrationsSelect<false>
      | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    company: Company;
    network: Network;
    certification: Certification;
  };
  globalsSelect: {
    company: CompanySelect<false> | CompanySelect<true>;
    network: NetworkSelect<false> | NetworkSelect<true>;
    certification: CertificationSelect<false> | CertificationSelect<true>;
  };
  locale: "en" | "de" | "fr" | "it";
  user: User & {
    collection: "users";
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  access?: {
    admin?: boolean | null;
    users?: boolean | null;
    content?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publish-queue".
 */
export interface PublishQueue {
  id: number;
  entityType: string;
  /**
   * ID of the changed entity
   */
  entityId?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "photos".
 */
export interface Photo {
  id: number;
  alt?: string | null;
  prefix?: string | null;
  blurhash?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logos".
 */
export interface Logo {
  id: number;
  prefix?: string | null;
  blurhash?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profile-pictures".
 */
export interface ProfilePicture {
  id: number;
  prefix?: string | null;
  blurhash?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  heroImage?: (number | null) | Photo;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Photo;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  image: number | Photo;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "influencers".
 */
export interface Influencer {
  id: number;
  name: string;
  socials?: Socials;
  image: number | ProfilePicture;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experts".
 */
export interface Expert {
  id: number;
  name: string;
  description: string;
  socials?: Socials;
  image: number | ProfilePicture;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: number;
  logo: number | Logo;
  name: string;
  website: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: number;
  name: string;
  city: string;
  url: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "awards".
 */
export interface Award {
  id: number;
  year: number;
  nominationDeadline?: string | null;
  nominationUrl?: string | null;
  votingOpening?: string | null;
  votingDeadline?: string | null;
  jury?:
    | {
        expert: number | Expert;
        id?: string | null;
      }[]
    | null;
  partners?:
    | {
        brand: number | Brand;
        id?: string | null;
      }[]
    | null;
  categories?:
    | {
        category: number | Category;
        sponsor?: (number | null) | Brand;
        ranked?: boolean | null;
        winnerImage?: (number | null) | ProfilePicture;
        nominees?:
          | {
              influencer: number | Influencer;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  newcomerScoutImage?: (number | null) | Photo;
  newcomerScoutDeadline?: string | null;
  newcomerScoutUrl?: string | null;
  newcomerScoutContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "award-shows".
 */
export interface AwardShow {
  id: number;
  award: number | Award;
  date?: string | null;
  location: number | Location;
  registrationUrl?: string | null;
  schedule?: ScheduleSlots;
  videoUrl?: string | null;
  images?: (number | Photo)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "creator-challenges".
 */
export interface CreatorChallenge {
  id: number;
  image: number | Photo;
  organizer: number | Brand;
  location?: (number | null) | Location;
  dateFrom?: string | null;
  dateTo?: string | null;
  registrationUrl?: string | null;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-media-campaigns".
 */
export interface SocialMediaCampaign {
  id: number;
  image: number | Photo;
  organizer: number | Brand;
  location?: (number | null) | Location;
  dateFrom?: string | null;
  dateTo?: string | null;
  registrationUrl?: string | null;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "network-events".
 */
export interface NetworkEvent {
  id: number;
  logo: number | Logo;
  image: number | Photo;
  location: number | Location;
  date: string;
  registrationUrl?: string | null;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certified-influencers".
 */
export interface CertifiedInfluencer {
  id: number;
  image: number | Photo;
  categories: (number | Category)[];
  birthdate: string;
  languages: (
    | "aa"
    | "ab"
    | "ae"
    | "af"
    | "ak"
    | "am"
    | "an"
    | "ar"
    | "as"
    | "av"
    | "ay"
    | "az"
    | "ba"
    | "be"
    | "bg"
    | "bi"
    | "bm"
    | "bn"
    | "bo"
    | "br"
    | "bs"
    | "ca"
    | "ce"
    | "ch"
    | "co"
    | "cr"
    | "cs"
    | "cu"
    | "cv"
    | "cy"
    | "da"
    | "de"
    | "dv"
    | "dz"
    | "ee"
    | "el"
    | "en"
    | "eo"
    | "es"
    | "et"
    | "eu"
    | "fa"
    | "ff"
    | "fi"
    | "fj"
    | "fo"
    | "fr"
    | "fy"
    | "ga"
    | "gd"
    | "gl"
    | "gn"
    | "gu"
    | "gv"
    | "ha"
    | "he"
    | "hi"
    | "ho"
    | "hr"
    | "ht"
    | "hu"
    | "hy"
    | "hz"
    | "ia"
    | "id"
    | "ie"
    | "ig"
    | "ii"
    | "ik"
    | "io"
    | "is"
    | "it"
    | "iu"
    | "ja"
    | "jv"
    | "ka"
    | "kg"
    | "ki"
    | "kj"
    | "kk"
    | "kl"
    | "km"
    | "kn"
    | "ko"
    | "kr"
    | "ks"
    | "ku"
    | "kv"
    | "kw"
    | "ky"
    | "la"
    | "lb"
    | "lg"
    | "li"
    | "ln"
    | "lo"
    | "lt"
    | "lu"
    | "lv"
    | "mg"
    | "mh"
    | "mi"
    | "mk"
    | "ml"
    | "mn"
    | "mr"
    | "ms"
    | "mt"
    | "my"
    | "na"
    | "nb"
    | "nd"
    | "ne"
    | "ng"
    | "nl"
    | "nn"
    | "no"
    | "nr"
    | "nv"
    | "ny"
    | "oc"
    | "oj"
    | "om"
    | "or"
    | "os"
    | "pa"
    | "pi"
    | "pl"
    | "ps"
    | "pt"
    | "qu"
    | "rm"
    | "rn"
    | "ro"
    | "ru"
    | "rw"
    | "sa"
    | "sc"
    | "sd"
    | "se"
    | "sg"
    | "si"
    | "sk"
    | "sl"
    | "sm"
    | "sn"
    | "so"
    | "sq"
    | "sr"
    | "ss"
    | "st"
    | "su"
    | "sv"
    | "sw"
    | "ta"
    | "te"
    | "tg"
    | "th"
    | "ti"
    | "tk"
    | "tl"
    | "tn"
    | "to"
    | "tr"
    | "ts"
    | "tt"
    | "tw"
    | "ty"
    | "ug"
    | "uk"
    | "ur"
    | "uz"
    | "ve"
    | "vi"
    | "vo"
    | "wa"
    | "wo"
    | "xh"
    | "yi"
    | "yo"
    | "za"
    | "zh"
    | "zu"
  )[];
  residence:
    | "AG"
    | "AR"
    | "AI"
    | "BS"
    | "BL"
    | "BE"
    | "FR"
    | "GE"
    | "GL"
    | "GR"
    | "JU"
    | "LU"
    | "NE"
    | "NW"
    | "OW"
    | "SG"
    | "SH"
    | "SO"
    | "SZ"
    | "TG"
    | "TI"
    | "UR"
    | "VD"
    | "VS"
    | "ZG"
    | "ZH";
  influencer: number | Influencer;
  bio: string;
  interests?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agencies".
 */
export interface Agency {
  id: number;
  logo: number | Logo;
  image: number | Photo;
  name: string;
  website: string;
  email: string;
  description: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conventions".
 */
export interface Convention {
  id: number;
  title: string;
  date: string;
  location: number | Location;
  registrationUrl?: string | null;
  partners?: (number | Brand)[] | null;
  schedule?: ScheduleSlots;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "voting-submissions".
 */
export interface VotingSubmission {
  id: number;
  email: string;
  award: number | Award;
  confirmed: boolean;
  firstName: string;
  lastName: string;
  hash: string;
  votes: {
    influencer: number | Influencer;
    category: number | Category;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "polyglot_messages".
 */
export interface PolyglotMessage {
  id: number;
  locale: string;
  content:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: "users";
        value: number | User;
      } | null)
    | ({
        relationTo: "publish-queue";
        value: number | PublishQueue;
      } | null)
    | ({
        relationTo: "photos";
        value: number | Photo;
      } | null)
    | ({
        relationTo: "logos";
        value: number | Logo;
      } | null)
    | ({
        relationTo: "profile-pictures";
        value: number | ProfilePicture;
      } | null)
    | ({
        relationTo: "pages";
        value: number | Page;
      } | null)
    | ({
        relationTo: "categories";
        value: number | Category;
      } | null)
    | ({
        relationTo: "influencers";
        value: number | Influencer;
      } | null)
    | ({
        relationTo: "experts";
        value: number | Expert;
      } | null)
    | ({
        relationTo: "brands";
        value: number | Brand;
      } | null)
    | ({
        relationTo: "locations";
        value: number | Location;
      } | null)
    | ({
        relationTo: "awards";
        value: number | Award;
      } | null)
    | ({
        relationTo: "award-shows";
        value: number | AwardShow;
      } | null)
    | ({
        relationTo: "creator-challenges";
        value: number | CreatorChallenge;
      } | null)
    | ({
        relationTo: "social-media-campaigns";
        value: number | SocialMediaCampaign;
      } | null)
    | ({
        relationTo: "network-events";
        value: number | NetworkEvent;
      } | null)
    | ({
        relationTo: "certified-influencers";
        value: number | CertifiedInfluencer;
      } | null)
    | ({
        relationTo: "agencies";
        value: number | Agency;
      } | null)
    | ({
        relationTo: "conventions";
        value: number | Convention;
      } | null)
    | ({
        relationTo: "voting-submissions";
        value: number | VotingSubmission;
      } | null)
    | ({
        relationTo: "polyglot_messages";
        value: number | PolyglotMessage;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: "users";
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: "users";
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  access?:
    | T
    | {
        admin?: T;
        users?: T;
        content?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "publish-queue_select".
 */
export interface PublishQueueSelect<T extends boolean = true> {
  entityType?: T;
  entityId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "photos_select".
 */
export interface PhotosSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  blurhash?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logos_select".
 */
export interface LogosSelect<T extends boolean = true> {
  prefix?: T;
  blurhash?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profile-pictures_select".
 */
export interface ProfilePicturesSelect<T extends boolean = true> {
  prefix?: T;
  blurhash?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  id?: T;
  title?: T;
  heroImage?: T;
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  image?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "influencers_select".
 */
export interface InfluencersSelect<T extends boolean = true> {
  name?: T;
  socials?: T | SocialsSelect<T>;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Socials_select".
 */
export interface SocialsSelect<T extends boolean = true> {
  platform?: T;
  url?: T;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experts_select".
 */
export interface ExpertsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  socials?: T | SocialsSelect<T>;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands_select".
 */
export interface BrandsSelect<T extends boolean = true> {
  logo?: T;
  name?: T;
  website?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  name?: T;
  city?: T;
  url?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "awards_select".
 */
export interface AwardsSelect<T extends boolean = true> {
  year?: T;
  nominationDeadline?: T;
  nominationUrl?: T;
  votingOpening?: T;
  votingDeadline?: T;
  jury?:
    | T
    | {
        expert?: T;
        id?: T;
      };
  partners?:
    | T
    | {
        brand?: T;
        id?: T;
      };
  categories?:
    | T
    | {
        category?: T;
        sponsor?: T;
        ranked?: T;
        winnerImage?: T;
        nominees?:
          | T
          | {
              influencer?: T;
              id?: T;
            };
        id?: T;
      };
  newcomerScoutImage?: T;
  newcomerScoutDeadline?: T;
  newcomerScoutUrl?: T;
  newcomerScoutContent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "award-shows_select".
 */
export interface AwardShowsSelect<T extends boolean = true> {
  award?: T;
  date?: T;
  location?: T;
  registrationUrl?: T;
  schedule?: T | ScheduleSlotsSelect<T>;
  videoUrl?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ScheduleSlots_select".
 */
export interface ScheduleSlotsSelect<T extends boolean = true> {
  title?: T;
  from?: T;
  to?: T;
  room?: T;
  description?: T;
  id?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "creator-challenges_select".
 */
export interface CreatorChallengesSelect<T extends boolean = true> {
  image?: T;
  organizer?: T;
  location?: T;
  dateFrom?: T;
  dateTo?: T;
  registrationUrl?: T;
  title?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-media-campaigns_select".
 */
export interface SocialMediaCampaignsSelect<T extends boolean = true> {
  image?: T;
  organizer?: T;
  location?: T;
  dateFrom?: T;
  dateTo?: T;
  registrationUrl?: T;
  title?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "network-events_select".
 */
export interface NetworkEventsSelect<T extends boolean = true> {
  logo?: T;
  image?: T;
  location?: T;
  date?: T;
  registrationUrl?: T;
  title?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certified-influencers_select".
 */
export interface CertifiedInfluencersSelect<T extends boolean = true> {
  image?: T;
  categories?: T;
  birthdate?: T;
  languages?: T;
  residence?: T;
  influencer?: T;
  bio?: T;
  interests?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agencies_select".
 */
export interface AgenciesSelect<T extends boolean = true> {
  logo?: T;
  image?: T;
  name?: T;
  website?: T;
  email?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conventions_select".
 */
export interface ConventionsSelect<T extends boolean = true> {
  title?: T;
  date?: T;
  location?: T;
  registrationUrl?: T;
  partners?: T;
  schedule?: T | ScheduleSlotsSelect<T>;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "voting-submissions_select".
 */
export interface VotingSubmissionsSelect<T extends boolean = true> {
  email?: T;
  award?: T;
  confirmed?: T;
  firstName?: T;
  lastName?: T;
  hash?: T;
  votes?:
    | T
    | {
        influencer?: T;
        category?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "polyglot_messages_select".
 */
export interface PolyglotMessagesSelect<T extends boolean = true> {
  locale?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company".
 */
export interface Company {
  id: number;
  name: string;
  address: string;
  whatsappUrl: string;
  contactUrl: string;
  newsletterUrl: string;
  socials?: Socials;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "network".
 */
export interface Network {
  id: number;
  cooperationApplicationUrl: string;
  campaignRequestUrl: string;
  whatsappImage: number | Photo;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certification".
 */
export interface Certification {
  id: number;
  influencerImage: number | Photo;
  influencerTitle: string;
  influencerHeadline: string;
  influencerContent: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  influencerApplicationUrl: string;
  influencerApplicationCta: string;
  agencyImage: number | Photo;
  agencyTitle: string;
  agencyHeadline: string;
  agencyContent: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  agencyApplicationUrl: string;
  agencyApplicationCta: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company_select".
 */
export interface CompanySelect<T extends boolean = true> {
  name?: T;
  address?: T;
  whatsappUrl?: T;
  contactUrl?: T;
  newsletterUrl?: T;
  socials?: T | SocialsSelect<T>;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "network_select".
 */
export interface NetworkSelect<T extends boolean = true> {
  cooperationApplicationUrl?: T;
  campaignRequestUrl?: T;
  whatsappImage?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certification_select".
 */
export interface CertificationSelect<T extends boolean = true> {
  influencerImage?: T;
  influencerTitle?: T;
  influencerHeadline?: T;
  influencerContent?: T;
  influencerApplicationUrl?: T;
  influencerApplicationCta?: T;
  agencyImage?: T;
  agencyTitle?: T;
  agencyHeadline?: T;
  agencyContent?: T;
  agencyApplicationUrl?: T;
  agencyApplicationCta?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}

declare module "payload" {
  export interface GeneratedTypes extends Config {}
}
